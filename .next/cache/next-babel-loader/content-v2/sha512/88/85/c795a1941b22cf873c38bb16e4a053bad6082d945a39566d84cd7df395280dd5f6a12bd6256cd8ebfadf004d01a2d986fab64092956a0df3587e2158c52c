{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class APICustomer {\n  constructor() {\n    _defineProperty(this, \"url\", \"https://api-next-ecommercee.vercel.app/api/\");\n\n    _defineProperty(this, \"addCustomer\", async (idcard, name, username, password, address, creditcard) => {\n      try {\n        let url2 = this.url + \"customer/customer\";\n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        var raw = JSON.stringify({\n          \"idcard\": idcard,\n          \"name\": name,\n          \"username\": username,\n          \"password\": password,\n          \"address\": address,\n          \"creditcard\": creditcard\n        });\n        var requestOptions = {\n          method: 'POST',\n          headers: myHeaders,\n          body: raw,\n          redirect: 'follow'\n        };\n        const response = await fetch(url2, requestOptions);\n\n        if (!response.ok) {\n          const error = await response.text();\n          return error;\n        }\n\n        return \"Success\";\n      } catch (e) {\n        console.log(e.message);\n      }\n    });\n\n    _defineProperty(this, \"updateCustomer\", async (idcard, name, username, password, address, creditcard) => {\n      try {\n        let url2 = this.url + \"customer/customer\";\n        var myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        var raw = JSON.stringify({\n          \"idcard\": idcard,\n          \"name\": name,\n          \"username\": username,\n          \"password\": password,\n          \"address\": address,\n          \"creditcard\": creditcard\n        });\n        var requestOptions = {\n          method: 'PUT',\n          headers: myHeaders,\n          body: raw,\n          redirect: 'follow'\n        };\n        const response = await fetch(url2, requestOptions);\n\n        if (!response.ok) {\n          const error = await response.text();\n          return error;\n        }\n\n        return \"Success\";\n      } catch (e) {\n        console.log(e.message);\n      }\n    });\n\n    _defineProperty(this, \"login\", async (username, password) => {\n      let bool = true;\n      const url2 = this.url + \"user/user?pusername=\" + username + \"&ppassword=\" + password;\n      var requestOptions = {\n        method: 'POST',\n        redirect: 'follow'\n      };\n      const response = await fetch(url2, requestOptions);\n\n      if (!response.ok) {\n        bool = false;\n        const error = await response.text();\n        return {\n          error,\n          bool\n        };\n      }\n\n      const result = await response.data;\n      return {\n        result,\n        bool\n      };\n    });\n\n    _defineProperty(this, \"getUserLogin\", async () => {\n      try {\n        let url2 = this.url + \"user/getloginuser\";\n        var requestOptions = {\n          method: 'GET',\n          redirect: 'follow'\n        };\n        const response = await fetch(url2, requestOptions);\n\n        if (response.ok) {\n          const result = await response.json();\n          return result;\n        }\n      } catch (e) {\n        return e.message;\n      }\n    });\n  }\n\n  static getInstance() {\n    if (!APICustomer.instancia) {\n      APICustomer.instancia = new APICustomer();\n    }\n\n    return APICustomer.instancia;\n  }\n\n}\n\n_defineProperty(APICustomer, \"instancia\", void 0);","map":{"version":3,"sources":["D:/TODO (Desarrollo Software)/Tutoriales y demas cosas/WebNextEcommercee/model/api/customer.js"],"names":["APICustomer","constructor","idcard","name","username","password","address","creditcard","url2","url","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","response","fetch","ok","error","text","e","console","log","message","bool","result","data","json","getInstance","instancia"],"mappings":";;AAEA,eAAe,MAAMA,WAAN,CACf;AAGIC,EAAAA,WAAW,GAAG;AAAA,iCADR,6CACQ;;AAAA,yCASC,OAAMC,MAAN,EAAaC,IAAb,EAAkBC,QAAlB,EAA2BC,QAA3B,EAAoCC,OAApC,EAA4CC,UAA5C,KACZ;AACE,UAAG;AACA,YAAIC,IAAI,GAAC,KAAKC,GAAL,GAAS,mBAAlB;AACA,YAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACCD,QAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,YAAIC,GAAG,GAAGC,IAAI,CAACC,SAAL,CACR;AACF,oBAASb,MADP;AAEF,kBAAOC,IAFL;AAGF,sBAAWC,QAHT;AAIF,sBAAWC,QAJT;AAKF,qBAAUC,OALR;AAMF,wBAAaC;AANX,SADQ,CAAV;AAWA,YAAIS,cAAc,GAAG;AACrBC,UAAAA,MAAM,EAAE,MADa;AAErBC,UAAAA,OAAO,EAAER,SAFY;AAGrBS,UAAAA,IAAI,EAAEN,GAHe;AAIrBO,UAAAA,QAAQ,EAAE;AAJW,SAArB;AAOJ,cAAMC,QAAQ,GAAC,MAAOC,KAAK,CAACd,IAAD,EAAOQ,cAAP,CAA3B;;AACE,YAAG,CAACK,QAAQ,CAACE,EAAb,EACA;AACA,gBAAMC,KAAK,GAAC,MAAMH,QAAQ,CAACI,IAAT,EAAlB;AACA,iBAAOD,KAAP;AACC;;AACD,eAAO,SAAP;AACD,OA9BD,CA+BA,OAAME,CAAN,EACA;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD;AAGF,KAhDU;;AAAA,4CAiDK,OAAM3B,MAAN,EAAaC,IAAb,EAAkBC,QAAlB,EAA2BC,QAA3B,EAAoCC,OAApC,EAA4CC,UAA5C,KACf;AACE,UAAG;AACA,YAAIC,IAAI,GAAC,KAAKC,GAAL,GAAS,mBAAlB;AACA,YAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACCD,QAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AAEA,YAAIC,GAAG,GAAGC,IAAI,CAACC,SAAL,CACR;AACF,oBAASb,MADP;AAEF,kBAAOC,IAFL;AAGF,sBAAWC,QAHT;AAIF,sBAAWC,QAJT;AAKF,qBAAUC,OALR;AAMF,wBAAaC;AANX,SADQ,CAAV;AAUA,YAAIS,cAAc,GAAG;AACrBC,UAAAA,MAAM,EAAE,KADa;AAErBC,UAAAA,OAAO,EAAER,SAFY;AAGrBS,UAAAA,IAAI,EAAEN,GAHe;AAIrBO,UAAAA,QAAQ,EAAE;AAJW,SAArB;AAOJ,cAAMC,QAAQ,GAAC,MAAOC,KAAK,CAACd,IAAD,EAAOQ,cAAP,CAA3B;;AACE,YAAG,CAACK,QAAQ,CAACE,EAAb,EACA;AACA,gBAAMC,KAAK,GAAC,MAAMH,QAAQ,CAACI,IAAT,EAAlB;AACA,iBAAOD,KAAP;AACC;;AACD,eAAO,SAAP;AACD,OA7BD,CA8BA,OAAME,CAAN,EACA;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACD;AAGF,KAvFS;;AAAA,mCAwFJ,OAAMzB,QAAN,EAAeC,QAAf,KACN;AACE,UAAIyB,IAAI,GAAC,IAAT;AACA,YAAMtB,IAAI,GAAC,KAAKC,GAAL,GAAS,sBAAT,GAAgCL,QAAhC,GAAyC,aAAzC,GAAuDC,QAAlE;AACA,UAAIW,cAAc,GAAG;AACnBC,QAAAA,MAAM,EAAE,MADW;AAEnBG,QAAAA,QAAQ,EAAE;AAFS,OAArB;AAIE,YAAMC,QAAQ,GAAE,MAAMC,KAAK,CAACd,IAAD,EAAMQ,cAAN,CAA3B;;AACA,UAAG,CAACK,QAAQ,CAACE,EAAb,EACA;AACAO,QAAAA,IAAI,GAAC,KAAL;AACA,cAAMN,KAAK,GAAC,MAAMH,QAAQ,CAACI,IAAT,EAAlB;AACA,eAAO;AAACD,UAAAA,KAAD;AAAOM,UAAAA;AAAP,SAAP;AACC;;AACD,YAAMC,MAAM,GAAC,MAAMV,QAAQ,CAACW,IAA5B;AACA,aAAO;AAACD,QAAAA,MAAD;AAAQD,QAAAA;AAAR,OAAP;AACH,KAzGS;;AAAA,0CA0GG,YACb;AACE,UACA;AACA,YAAItB,IAAI,GAAC,KAAKC,GAAL,GAAS,mBAAlB;AACA,YAAIO,cAAc,GAAG;AACnBC,UAAAA,MAAM,EAAE,KADW;AAEnBG,UAAAA,QAAQ,EAAE;AAFS,SAArB;AAIA,cAAMC,QAAQ,GAAE,MAAMC,KAAK,CAACd,IAAD,EAAMQ,cAAN,CAA3B;;AACA,YAAGK,QAAQ,CAACE,EAAZ,EACA;AACE,gBAAMQ,MAAM,GAAC,MAAMV,QAAQ,CAACY,IAAT,EAAnB;AACA,iBAAOF,MAAP;AACD;AAGA,OAfD,CAgBA,OAAML,CAAN,EACD;AACE,eAAOA,CAAC,CAACG,OAAT;AACD;AACD,KAhIS;AAAG;;AACjB,SAAOK,WAAP,GAAqB;AACd,QAAI,CAAClC,WAAW,CAACmC,SAAjB,EAA4B;AAC3BnC,MAAAA,WAAW,CAACmC,SAAZ,GAAwB,IAAInC,WAAJ,EAAxB;AACA;;AAED,WAAOA,WAAW,CAACmC,SAAnB;AACH;;AAVR;;gBADqBnC,W","sourcesContent":["\r\n\r\nexport default class APICustomer\r\n{\r\n    static instancia;\r\n     url =\"https://api-next-ecommercee.vercel.app/api/\";\r\n    constructor() { }\r\n    static getInstance() {\r\n           if (!APICustomer.instancia) {\r\n            APICustomer.instancia = new APICustomer();\r\n           }\r\n   \r\n           return APICustomer.instancia;\r\n       }\r\n      \r\n       addCustomer=async(idcard,name,username,password,address,creditcard)=>\r\n       {\r\n         try{\r\n            let url2=this.url+\"customer/customer\"\r\n            var myHeaders = new Headers();\r\n             myHeaders.append(\"Content-Type\", \"application/json\");\r\n     \r\n             var raw = JSON.stringify(\r\n               {\r\n             \"idcard\":idcard,\r\n             \"name\":name,\r\n             \"username\":username,\r\n             \"password\":password,\r\n             \"address\":address,\r\n             \"creditcard\":creditcard\r\n           }\r\n           );\r\n     \r\n             var requestOptions = {\r\n             method: 'POST',\r\n             headers: myHeaders,\r\n             body: raw,\r\n             redirect: 'follow'\r\n             };\r\n     \r\n         const response=await  fetch(url2, requestOptions)\r\n           if(!response.ok)\r\n           {\r\n           const error=await response.text();\r\n           return error;\r\n           }\r\n           return \"Success\";\r\n         }\r\n         catch(e)\r\n         {\r\n           console.log(e.message);\r\n         }\r\n          \r\n        \r\n       }  \r\n        updateCustomer=async(idcard,name,username,password,address,creditcard)=>\r\n        {\r\n          try{\r\n             let url2=this.url+\"customer/customer\"\r\n             var myHeaders = new Headers();\r\n              myHeaders.append(\"Content-Type\", \"application/json\");\r\n  \r\n              var raw = JSON.stringify(\r\n                {\r\n              \"idcard\":idcard,\r\n              \"name\":name,\r\n              \"username\":username,\r\n              \"password\":password,\r\n              \"address\":address,\r\n              \"creditcard\":creditcard\r\n            }\r\n            );\r\n              var requestOptions = {\r\n              method: 'PUT',\r\n              headers: myHeaders,\r\n              body: raw,\r\n              redirect: 'follow'\r\n              };\r\n      \r\n          const response=await  fetch(url2, requestOptions)\r\n            if(!response.ok)\r\n            {\r\n            const error=await response.text();\r\n            return error;\r\n            }\r\n            return \"Success\";\r\n          }\r\n          catch(e)\r\n          {\r\n            console.log(e.message);\r\n          }\r\n           \r\n         \r\n        } \r\n        login=async(username,password)=>\r\n        {\r\n          let bool=true;\r\n          const url2=this.url+\"user/user?pusername=\"+username+\"&ppassword=\"+password;\r\n          var requestOptions = {\r\n            method: 'POST',\r\n            redirect: 'follow'\r\n          };\r\n            const response =await fetch(url2,requestOptions);\r\n            if(!response.ok)\r\n            {\r\n            bool=false;\r\n            const error=await response.text();\r\n            return {error,bool};\r\n            }\r\n            const result=await response.data;\r\n            return {result,bool}; \r\n        }\r\n        getUserLogin=async()=>\r\n        {\r\n          try\r\n          {\r\n          let url2=this.url+\"user/getloginuser\";\r\n          var requestOptions = {\r\n            method: 'GET',\r\n            redirect: 'follow'\r\n          };\r\n          const response =await fetch(url2,requestOptions);\r\n          if(response.ok)\r\n          {\r\n            const result=await response.json();\r\n            return result;\r\n          }\r\n          \r\n           \r\n          }\r\n          catch(e)\r\n         {\r\n           return e.message;\r\n         }\r\n        }\r\n   \r\n}"]},"metadata":{},"sourceType":"module"}